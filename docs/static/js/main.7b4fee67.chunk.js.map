{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GrifGridItem.js","components/GifGrid.js","hooks/useFechtGif.js","GitExpertApp.js","index.js"],"names":["AddCategory","props","setCategories","useState","inputValue","setImputValue","onSubmit","e","preventDefault","trim","length","cats","style","display","type","value","onChange","target","handleInpuntChange","width","onClick","marginLeft","getGif","categorie","a","URL","encodeURI","fetch","response","json","data","gits","map","img","id","title","url","images","downsized_medium","GrifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","toUpperCase","textAlign","height","item","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAgDeA,EA1CK,SAACC,GACnB,IAAQC,EAAkBD,EAAlBC,cACR,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACE,qCACE,sBAAMC,SAZW,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAQgBO,MAAO,CAAEC,QAAS,YAAhD,SACE,uBACEC,KAAK,OACLC,MAAOX,EACPY,SAAU,SAACT,GAAD,OApBS,SAACA,GAC1B,IAAMQ,EAAQR,EAAEU,OAAOF,MACvBV,EAAcU,GAkBSG,CAAmBX,IACpCK,MAAO,CAAEO,MAAO,WAIpB,wBACEC,QAfmB,WACvBlB,EAAc,KAeVU,MAAO,CAAEO,MAAO,MAAOE,WAAY,QAFrC,iC,+BChCOC,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UACpDH,GAFkB,+DAIGI,MAAMF,GAJT,cAIdG,EAJc,gBAKGA,EAASC,OALZ,uBAKZC,EALY,EAKZA,KAGFC,GAFSD,GAAc,IAETE,KAAI,SAACC,GAAS,IAAD,EAC/B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAZlB,kBAebL,GAfa,4CAAH,sDCWJQ,MATf,YAA2C,IAAnBJ,EAAkB,EAAlBA,MAAWC,GAAO,EAAXF,GAAW,EAAPE,KACjC,OACE,sBAAKI,UAAU,0CAAf,UACE,qBAAKA,UAAU,UAAUC,IAAKL,EAAKM,IAAKP,IACxC,4BAAIA,QCgCKQ,EAnCC,SAAC,GAAmB,IAAjBpB,EAAgB,EAAhBA,UACjB,ECF0B,SAACA,GAC3B,MAA0BpB,mBAAS,CACjC2B,KAAM,GACNc,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAQA,OAHAC,qBAAU,WACRzB,EAAOC,GAAWyB,MAAK,SAACC,GAAD,OAAUH,EAAS,CAAEhB,KAAMmB,EAAML,SAAS,SAChE,CAACrB,IACGsB,EDP2BK,CAAa3B,GAAjCc,EAAd,EAAQP,KAAcc,EAAtB,EAAsBA,QACtB,OACE,qCACE,oBAAIJ,UAAU,sCAAd,SACGjB,EAAU4B,gBAEZP,GACC,sBACEhC,MAAO,CACLwC,UAAW,SACXjC,MAAO,QAHX,UAME,qBACEP,MAAO,CAAEO,MAAO,MAAOkC,OAAQ,OAC/BZ,IAAI,sIACJC,IAAI,UAEN,mBAAGF,UAAU,mCAAb,4BAGe,IAAlBH,EAAO3B,OACN,oBAAIE,MAAO,CAAEwC,UAAW,UAAxB,0BAEA,qBAAKZ,UAAU,YAAf,SACGH,EAAOL,KAAI,SAACsB,GACX,OAAO,cAAC,EAAD,eAAgCA,GAAbA,EAAKpB,aET5BqB,EAjBM,SAACtD,GACpB,MAAoCE,mBAAS,CAAC,KAA9C,mBAAOqD,EAAP,KAAmBtD,EAAnB,KAEA,OACE,qCACE,oBAAIU,MAAO,CAAEwC,UAAW,UAAxB,4BACA,cAAC,EAAD,CAAalD,cAAeA,IAC5B,uBACA,6BACGsD,EAAWxB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAyBA,UAAWA,GAAtBA,YCVxBkC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.7b4fee67.chunk.js","sourcesContent":["/** @format */\r\n\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = (props) => {\r\n  const { setCategories } = props;\r\n  const [inputValue, setImputValue] = useState('');\r\n  const handleInpuntChange = (e) => {\r\n    const value = e.target.value;\r\n    setImputValue(value);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setImputValue('');\r\n    }\r\n  };\r\n  const handleDeleteList = () => {\r\n    setCategories([]);\r\n  };\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} style={{ display: 'contents' }}>\r\n        <input\r\n          type='text'\r\n          value={inputValue}\r\n          onChange={(e) => handleInpuntChange(e)}\r\n          style={{ width: '60%' }}\r\n        />\r\n      </form>\r\n\r\n      <button\r\n        onClick={handleDeleteList}\r\n        style={{ width: '20%', marginLeft: '10px' }}\r\n      >\r\n        Limpiar Listado\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","/** @format */\r\n\r\nexport const getGif = async (categorie) => {\r\n  const URL = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    categorie\r\n  )}&limit=20&api_key=CLEQp1OaLyKEL2wt6kbI1HFY1ZSFZlMp`;\r\n  const response = await fetch(URL);\r\n  const { data } = await response.json();\r\n  const record = data ? data : [];\r\n\r\n  const gits = record.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gits;\r\n};\r\n","/** @format */\r\n\r\nimport React from 'react';\r\n\r\nfunction GrifGridItem({ title, id, url }) {\r\n  return (\r\n    <div className='cards animate__animated animate__bounce'>\r\n      <img className='imgItem' src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GrifGridItem;\r\n","/** @format */\r\n\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFechtGif';\r\nimport GrifGridItem from '../components/GrifGridItem';\r\nconst GifGrid = ({ categorie }) => {\r\n  const { data: images, loading } = useFetchGifs(categorie);\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__fadeInUp'>\r\n        {categorie.toUpperCase()}\r\n      </h3>\r\n      {loading && (\r\n        <div\r\n          style={{\r\n            textAlign: 'center',\r\n            width: '100%',\r\n          }}\r\n        >\r\n          <img\r\n            style={{ width: '20%', height: '10%' }}\r\n            src='https://media0.giphy.com/media/Q0MrhO9BUSxKR8RdZC/giphy.gif?cid=790b7611328848210ac55432016aa39ceb6464f3ac897345&rid=giphy.gif&ct=g'\r\n            alt='Carga'\r\n          />\r\n          <p className='animate__animated animate__flash'>Cargando...</p>\r\n        </div>\r\n      )}\r\n      {images.length === 0 ? (\r\n        <h1 style={{ textAlign: 'center' }}>No hay Datos</h1>\r\n      ) : (\r\n        <div className='card-grid'>\r\n          {images.map((item) => {\r\n            return <GrifGridItem key={item.id} {...item} />;\r\n          })}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","/** @format */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { getGif } from '../helpers/getGifs';\r\nexport const useFetchGifs = (categorie) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGif(categorie).then((imgs) => setstate({ data: imgs, loading: false }));\r\n  }, [categorie]);\r\n  return state;\r\n};\r\n","/** @format */\r\n\r\nimport React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GitExpertApp = (props) => {\r\n  const [categories, setCategories] = useState(['']);\r\n\r\n  return (\r\n    <>\r\n      <h2 style={{ textAlign: 'center' }}>GIF Expert App</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((categorie) => (\r\n          <GifGrid key={categorie} categorie={categorie} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GitExpertApp;\r\n","/** @format */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GitExpertApp from './GitExpertApp';\nReactDOM.render(<GitExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}